---
name: Push and Deployt to AWS
on:
  push:
    branches:
      - main
jobs:
  build-and-push:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tech-challenge-fiap
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Configura kubectl com o contexto do cluster EKS
      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.CLUSTER_NAME }}

      # Substitui os placeholders pelas credenciais reais do GitHub Secrets
      - name: Replace Secrets
        run: |
          cd src/main/resources/deployment/
          sed -i 's/POSTGRES_HOST_PLACEHOLDER/${{ secrets.POSTGRES_HOST }}/g' postgres-secrets.yaml
          sed -i 's/POSTGRES_DB_PLACEHOLDER/${{ secrets.POSTGRES_DB }}/g' postgres-secrets.yaml
          sed -i 's/POSTGRES_USER_PLACEHOLDER/${{ secrets.POSTGRES_USER }}/g' postgres-secrets.yaml
          sed -i 's/POSTGRES_PASSWORD_PLACEHOLDER/${{ secrets.POSTGRES_PASSWORD }}/g' postgres-secrets.yaml

      # Aplica o arquivo postgres-secrets.yaml com as credenciais
      - name: Apply Postgres Secrets and ConfigMap
        run: |
          cd src/main/resources/deployment/
          kubectl apply -f postgres-secrets.yaml

      # Aplicar o deployment ou atualização no cluster EKS
      - name: Deploy to EKS
        run: |
          cd src/main/resources/deployment/
          kubectl apply -f app-deploy.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/spring-rest-api

      - name: Update image in Deployment
        run: |
          kubectl set image deployment/spring-rest-api spring-rest-api=${{ steps.login-ecr.outputs.registry }}/tech-challenge-fiap:latest

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${{ secrets.POSTGRES_HOST }}:5432/${{ secrets.POSTGRES_DB }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      MERCADOPAGO_ACCESS_KEY: ${{ secrets.MERCADOPAGO_ACCESS_KEY }}
      MERCADOPAGO_PUBLIC_KEY: ${{ secrets.MERCADOPAGO_PUBLIC_KEY }}