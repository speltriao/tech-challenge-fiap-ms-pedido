name: SonarQube Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarQube:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: galega_burguer  # Database for your application
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      sonarqube:
        image: sonarqube:9.9-community
        ports:
          - 9000:9000
        env:
          SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar  # Database for SonarQube
          SONAR_JDBC_USERNAME: postgres
          SONAR_JDBC_PASSWORD: postgres
        options: >-
          --health-cmd="curl --fail http://localhost:9000 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --memory=2g
          --cpus=2

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle (Skip Tests)
        run: ./gradlew build -x test

      - name: Wait for SonarQube to be Ready
        run: |
          echo "Waiting for SonarQube to be ready..."
          count=0
          until curl -s http://localhost:9000 | grep "Welcome to SonarQube"; do
            echo "SonarQube is not ready yet. Waiting for 10 seconds..."
            sleep 10
            count=$((count+1))
            if [ $count -ge 60 ]; then
              echo "SonarQube did not become ready in time. Exiting."
              exit 1
            fi
          done
          echo "SonarQube is ready!"

      - name: Check SonarQube Logs
        run: |
          echo "Checking SonarQube logs..."
          docker ps
          docker logs $(docker ps -q -f ancestor=sonarqube:9.9-community) || echo "No logs available"

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube -x test
