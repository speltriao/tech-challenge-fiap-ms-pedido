name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: galega_burguer
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl -f http://localhost:9000/api/system/health || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
        env:
          SONAR_JDBC_URL: jdbc:postgresql://localhost:5432/galega_burguer
          SONAR_JDBC_USERNAME: postgres
          SONAR_JDBC_PASSWORD: postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build -x test  # Skip tests during build

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Wait for SonarQube to be ready
        run: |
          until curl -s http://localhost:9000/api/system/health | grep '"status":"OK"'; do
            echo "Waiting for SonarQube to be ready..."
            sleep 5
          done

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Add your SonarQube token to GitHub secrets
        run: ./gradlew sonarqube -Dsonar.projectKey=your_project_key -Dsonar.host.url=http://localhost:9000 -Dsonar.login=$SONAR_TOKEN
