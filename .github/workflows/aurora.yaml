name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Check if Aurora Cluster Exists
        id: check_aurora
        run: |
          CLUSTER_ID="serverless-aurora-pg-cluster"
          STATUS=$(aws rds describe-db-clusters --db-cluster-identifier "$CLUSTER_ID" --query 'DBClusters[0].Status' --output text 2>/dev/null || echo "not_found")
          echo "CLUSTER_STATUS=$STATUS" >> $GITHUB_ENV

      - name: Terraform Init
        if: env.CLUSTER_STATUS == 'not_found'
        run: terraform init

      - name: Terraform Plan
        if: env.CLUSTER_STATUS == 'not_found'
        env:
          TF_LOG: DEBUG
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
          TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}
          TF_VAR_subnet_id_a: ${{ secrets.AWS_SUBNET_ID_A }}
          TF_VAR_subnet_id_b: ${{ secrets.AWS_SUBNET_ID_B }}
        run: terraform plan

      - name: Terraform Apply
        if: env.CLUSTER_STATUS == 'not_found'
        env:
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
          TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}
          TF_VAR_subnet_id_a: ${{ secrets.AWS_SUBNET_ID_A }}
          TF_VAR_subnet_id_b: ${{ secrets.AWS_SUBNET_ID_B }}
        run: terraform apply -auto-approve

      - name: Wait for Aurora Serverless to be available
        if: env.CLUSTER_STATUS == 'not_found'
        id: wait_for_db
        run: |
          CLUSTER_ID="serverless-aurora-pg-cluster"
          check_db_status() {
            aws rds describe-db-clusters --db-cluster-identifier "$CLUSTER_ID" --query 'DBClusters[0].Status' --output text
          }
          STATUS="initializing"
          until [ "$STATUS" == "available" ]; do
            echo "Waiting for Aurora Serverless cluster to be available..."
            STATUS=$(check_db_status)
            if [ "$STATUS" != "available" ]; then
              sleep 30
            fi
          done
          echo "Aurora Serverless cluster is now available."