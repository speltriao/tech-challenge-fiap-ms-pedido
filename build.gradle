plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.21"
	id "org.sonarqube" version "4.3.0.3225"
}

group = 'com.galega'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'
	implementation 'org.flywaydb:flyway-core'
	implementation 'software.amazon.awssdk:sqs:2.20.58'
	implementation 'software.amazon.awssdk:sts:2.20.58'
	implementation 'software.amazon.awssdk:sns:2.20.58'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:testcontainers:1.20.4'
	testImplementation 'org.testcontainers:postgresql:1.20.4'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

sonarqube {
	properties {
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectKey", "speltriao_tech-challenge-fiap-ms-pedido"
		property "sonar.organization", "speltriao"
		property "sonar.login", System.getenv("SONAR_TOKEN")
		property "sonar.exclusions", "**/*DTO.java,**/*Builder.java,**/*Mapper.java,**/*Config.java,**/*Constants.java,**/*Exception.java,**/*Configuration.java"
	}
}

jacoco {
	toolVersion = '0.8.9'
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		csv.required = false
	}
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				it.isDirectory() ?
						it :
						fileTree(it) {
							exclude '**/*DTO.class'
							exclude '**/*Builder.class'
							exclude '**/*Mapper.class'
							exclude '**/*Config.class'
							exclude '**/*Constants.class'
							exclude '**/*Exception.class'
							exclude '**/*Configuration.class'
						}
			})
	)
}
